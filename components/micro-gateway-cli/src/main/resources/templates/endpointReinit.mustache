
        {{#endpoints}}
            {{#if isEtcdEnabled}}
                endpointEtcdConfigValues["{{name}}_{{endpointUrlType}}__{{@index}}_etcdKey"] = "{{etcdKey}}";
            {{/if}}
        {{/endpoints}}
        foreach var [etcdKeyConfigValue,defaultEtcdKey] in endpointEtcdConfigValues.entries() {
            string etcdKey = gateway:retrieveConfig(etcdKeyConfigValue, defaultEtcdKey);
            if (etcdKey != "" && gateway:isEtcdConnectionEstablished()) {
                map<any> urlChangedMap = gateway:getUrlChangedMap();
                hasUrlChanged = <boolean>urlChangedMap[etcdKey];
                if(hasUrlChanged is boolean) {
                    if (reinitRequired == false) {
                        reinitRequired = hasUrlChanged;
                        if (hasUrlChanged == true) {
                            failedEtcdKeyConfigValue = etcdKeyConfigValue;
                        failedEtcdKey = etcdKey;
                        }
                    }
                } else {
                log:printError("Error in checking for Re-initialization", err = hasUrlChanged);
                }
            }
        }
                        if (reinitRequired) {
                        map<string> etcdUrls = gateway:getEtcdUrlsMap();
                        //destination_attribute = <string>etcdUrls[etcdKey];
                        {{#equals type "http"}} {{>httpEndpointReInit}} {{/equals}}
                        {{#equals type "load_balance"}} {{>lbEndpointReInit}} {{/equals}}
                        {{#equals type "failover"}} {{>failoverEndpointReInit}} {{/equals}}

                            if(reInitializedEndpoint is error) {
                                reinitFailed = true;
                                map<any> urlChangedMap = gateway:getUrlChangedMap();
                                urlChangedMap[failedEtcdKey] = true;

                                http:Response res = new;
                                res.statusCode = 500;
                                json payload = {
                                    "fault": {
                                        "code": "101503",
                                        "message": "Runtime Error",
                                        "description": "Error while connecting to re initialized backend"
                                    }
                                };
                                invocationContext.attributes["error_code"] = "101503";
                                res.setPayload(payload);
                                clientResponse = res;
                                log:printError("URL defined at etcd for key " + gateway:getConfigValue("", failedEtcdKeyConfigValue, "") + " is invalid");
                            }
                            reinitRequired = false;
                        }


